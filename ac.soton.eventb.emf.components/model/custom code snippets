//// custom ///


Component
----------
This used to prevent renaming of refined components (i.e. force the name to be the same as the refined component like the connector does with inherits)
However, this was removed at request of NE.
	
	


	
	

AbstractComponentOperationImpl
------------------------------
	

	/* 
	 * Customised to fix problem with notification of label change on EReference 'elaborates' change.
	 */
	@Override
	public void eNotify(Notification notification) {
		super.eNotify(notification);
		
		int type = notification.getEventType();
		Object feature = notification.getFeature();
		if (ComponentsPackage.Literals.ABSTRACT_COMPONENT_OPERATION__ELABORATES.equals(feature)
				&& (type == Notification.ADD || type == Notification.ADD_MANY
						|| type == Notification.REMOVE || type == Notification.REMOVE_MANY))
			if (eNotificationRequired())
				eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.ABSTRACT_COMPONENT_OPERATION__LABEL, notification.getOldValue(), notification.getNewValue()));
			
	}
	

////modified////







AbstractComponentOperationImpl
------------------------------

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getLabel() {
		if (getElaborates() instanceof EventBNamed){
			return ((EventBNamed) getElaborates()).getName();
		}else if (getElaborates() instanceof EventBLabeled){
			return ((EventBLabeled) getElaborates()).getLabel();
		}else return "<no label - fix elaborates>";
	}
	

	
	/**
	 * <!-- begin-user-doc -->
	 * convergence is derived from the elaborated events
	 * if there is at least one elaborated event and all the 
	 * elaborated events have the same convergence then that convergence
	 * is returned. Otherwise null is returned.
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public Convergence getConvergence() {
		Convergence convergence;
		if (getElaborates().isEmpty()) convergence = null;
		else {
			convergence = getElaborates().get(0).getConvergence();
			for (Event e : getElaborates()){
				if (convergence != e.getConvergence()){
					convergence = null;
				}
			}
		}
		return convergence;
	}

	/**
	 * <!-- begin-user-doc -->
	 * This sets the convergence of all the elaborated events
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setConvergence(Convergence newConvergence) {
		for (Event e : getElaborates()){
			e.setConvergence(newConvergence);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Does nothing. Convergence is derived from the elaborated events
	 * and cannot be un set
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void unsetConvergence() {

	}

	/**
	 * <!-- begin-user-doc -->
	 * convergence is derived from the elaborated events
	 * if there is at least one elaborated event and all the 
	 * elaborated events have the same convergence then the convergence
	 * is considered to be set. Otherwise it is considered un-set.
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public boolean isSetConvergence() {
		return getConvergence()!= null;
	}

	
	private boolean extended;
	
	/**
	 * <!-- begin-user-doc -->
	 * 	if Extended is considered set, it is returned, otherwise null
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public boolean isExtended() {
		return isSetExtended() ?
				extended
				:
				null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * This sets the extended of all the elaborated events
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setExtended(boolean newExtended) {
		for (Event e : getElaborates()){
			e.setExtended(newExtended);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Does nothing. Extended is derived from the elaborated events
	 * and cannot be un-set
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void unsetExtended() {
		
	}

	/**
	 * <!-- begin-user-doc -->
	 * extended is derived from the elaborated events
	 * if there is at least one elaborated event and all the 
	 * elaborated events have the same extended then the extended
	 * is considered to be set. Otherwise it is considered un-set.
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public boolean isSetExtended() {
		if (elaborates.isEmpty()) return false;
		else {
			extended = elaborates.get(0).isExtended();
			for (Event e : elaborates){
				if (extended != e.isExtended()){
					return false;
				}
			}
			return true;
		}
	}
	
	
	
	
	ConnectorImpl
---------------

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getType() {
		if (getInherits() instanceof Connector)	return inherits.getType();
		else return type;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setType(String newType) {
		if (getInherits() instanceof Connector)	return;
		String oldType = type;
		type = newType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__TYPE, oldType, type));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getInitialValue() {
		if (getInherits() instanceof Connector)	return inherits.getInitialValue();
		return initialValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setInitialValue(String newInitialValue) {
		if (getInherits() instanceof Connector)	return;
		String oldInitialValue = initialValue;
		initialValue = newInitialValue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__INITIAL_VALUE, oldInitialValue, initialValue));
	}
	
		/**
	 * <!-- begin-user-doc -->
	 * changed to notify changes to all the things that are inherited (name, type, initialValue)
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setInherits(AbstractPort newInherits) {
		AbstractPort oldInherits = inherits;
		String oldName = this.getName();
		String oldType = getType();
		String oldInitialValue = this.getInitialValue();
		inherits = newInherits;
		if (eNotificationRequired()) {
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__INHERITS, oldInherits, inherits));
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__NAME, oldName, getName()));
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__TYPE, oldType, getType()));
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.CONNECTOR__INITIAL_VALUE, oldInitialValue, getInitialValue()));
		}
	}
	
		/**
	 * <!-- begin-user-doc -->
	 * if inherits is set this copies the name from the inherited element
	 * otherwise set the name of this element.
	 * <!-- end-user-doc -->
	 * @custom
	 */
	@Override
	public void setName(String name) {
		if (getInherits() instanceof Connector)	super.setName(inherits.getName()); 
		else super.setName(name);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * if inherits is set this gets the name from the inherited element
	 * otherwise gets the name of this element.
	 * <!-- end-user-doc -->
	 * @custom
	 */
	@Override
	public String getName(){
		if (getInherits() instanceof Connector) return inherits.getName();
		else return super.getName();
	}
	
	Implementation for connector
		/**
	 * <!-- begin-user-doc -->
	 * return itself
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public Connector basicGetConnector() {
		return this;
	}
	
	Similarly in AbstractPortImpl
	-------------------------------
	
	/**
	 * <!-- begin-user-doc -->
	 * if inherits, type is obtained from the inherited abstract port
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getType() {
		if (getInherits() instanceof AbstractPort)	return ((AbstractPort)getInherits()).getType();
		else return type;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * setting type is disabled if inherits
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setType(String newType) {
		if (getInherits() instanceof Connector)	return;
		String oldType = type;
		type = newType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.ABSTRACT_PORT__TYPE, oldType, type));
	}
	
	
	
	/**
	 * <!-- begin-user-doc -->
	 * this has been changed to also notify that the type changes (becomes inherited)
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setInherits(AbstractPort newInherits) {
		AbstractPort oldInherits = inherits;
		String oldType = getType();
		inherits = newInherits;
		if (eNotificationRequired()) {
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.ABSTRACT_PORT__INHERITS, oldInherits, inherits));
			eNotify(new ENotificationImpl(this, Notification.SET, ComponentsPackage.ABSTRACT_PORT__TYPE, oldType, getType()));
		}
	}
	










////// old version //////
ComponentImpl
---------------

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getName() {
		return doGetName();	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setName(String newName) {
		doSetName(newName);
	}
	
RefinedComponentImpl
--------------------

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getLabel() {
		if (getRefines() instanceof EventBNamed){
			return ((EventBNamed) getRefines()).getName();
		}else if (getRefines() instanceof EventBLabeled){
			return ((EventBLabeled) getRefines()).getLabel();
		}else return " ";
	}	


InheritedConnectorImpl
----------------------

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getLabel() {
		if (getInherits() instanceof EventBNamed){
			return ((EventBNamed) getInherits()).getName();
		}else if (getInherits() instanceof EventBLabeled){
			return ((EventBLabeled) getInherits()).getLabel();
		}else return " ";
	}


	

	